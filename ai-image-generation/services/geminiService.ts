
import { GoogleGenAI, Modality } from "@google/genai";
import type { Option } from '../types';

const MODEL_NAME = 'gemini-2.5-flash-image';

const getBase64Parts = (base64String: string) => {
  const match = base64String.match(/^data:(image\/.+);base64,(.+)$/);
  if (!match) {
    throw new Error('Invalid base64 string format');
  }
  return {
    mimeType: match[1],
    data: match[2],
  };
};

export const generateFashionImage = async (
  clothingImage: string, // base64 string
  modelImage: string, // base64 string
  background: Option
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const clothingImageParts = getBase64Parts(clothingImage);
  const modelImageParts = getBase64Parts(modelImage);

  const prompt = `Create a high-quality, photorealistic image for a fashion e-commerce website. The image must feature the model from the second image provided, wearing the clothing item from the first image provided. The background should be: ${background.prompt}. The final image should be stylish, professional, and focus on showcasing the clothing item accurately and appealingly on the specified model.`;
  
  try {
    const response = await ai.models.generateContent({
      model: MODEL_NAME,
      contents: {
        parts: [
          {
            inlineData: {
              data: clothingImageParts.data,
              mimeType: clothingImageParts.mimeType,
            },
          },
          {
            inlineData: {
                data: modelImageParts.data,
                mimeType: modelImageParts.mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    throw new Error("Failed to generate the AI image. Please check the console for more details.");
  }
};