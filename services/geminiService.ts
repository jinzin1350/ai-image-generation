
import { GoogleGenAI, Modality } from "@google/genai";
import type { Option } from '../types';

const MODEL_NAME = 'gemini-2.5-flash-image';

const getBase64Parts = (base64String: string) => {
  const match = base64String.match(/^data:(image\/.+);base64,(.+)$/);
  if (!match) {
    throw new Error('Invalid base64 string format');
  }
  return {
    mimeType: match[1],
    data: match[2],
  };
};

export const generateFashionImage = async (
  clothingImage: string, // base64 string
  modelImage: string, // base64 string
  background: Option,
  productDetails?: {
    productType: string;
    color: string;
    style: string;
    modelPose: string;
    lightingStyle: string;
    shotType: string;
  }
): Promise<string> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const clothingImageParts = getBase64Parts(clothingImage);
  const modelImageParts = getBase64Parts(modelImage);

  const detailsPrompt = productDetails ? `

PRODUCT DETAILS:
- Type: ${productDetails.productType}
- Color: ${productDetails.color}
- Style: ${productDetails.style}
- Model Pose: ${productDetails.modelPose}

MODEL REQUIREMENTS:
- Use the exact facial features, skin tone, and hair from the provided model image
- Maintain the model's natural body proportions and physique
- Keep the model's authentic appearance - do not make them look artificial or overly edited
- The model should appear relaxed and confident in the ${productDetails.modelPose} pose
- Natural facial expression that matches the style (e.g., calm for casual, confident for formal)

CLOTHING INTEGRATION:
- The ${productDetails.color} ${productDetails.productType} must fit naturally on the model's body
- Show realistic fabric wrinkles, folds, and draping
- Proper shadows and highlights on the fabric to show texture and depth
- The clothing should interact naturally with the model's body and pose
- Ensure the garment's proportions are accurate and realistic

IMAGE QUALITY & REALISM:
- Professional photography lighting with soft shadows
- Natural color grading - avoid oversaturation or artificial filters
- Sharp focus on the clothing item and model
- Depth of field that keeps the subject clear and background slightly softer
- Studio-quality composition similar to high-end fashion catalogs
- NO artificial CGI look, NO plastic-like skin, NO fake lighting` : '';

  const prompt = `Create an ultra-realistic, professional fashion photoshoot image for an e-commerce website.

IMAGE COMPOSITION:
- Main subject: The model from the second image wearing the clothing item from the first image
- Background: ${background.prompt}
- Camera angle: Eye-level, professional fashion photography perspective
- Framing: ${productDetails?.shotType || 'Full body shot showing the complete outfit'}
- Lighting: ${productDetails?.lightingStyle || 'Professional studio lighting'}${detailsPrompt}

CRITICAL REALISM CHECKLIST:
✓ Natural, professional studio lighting (avoid harsh shadows or overexposure)
✓ Realistic skin texture with natural pores and subtle imperfections
✓ Authentic fabric texture showing weave, wrinkles, and material properties
✓ Proper color accuracy for both skin tones and clothing
✓ Natural body proportions and realistic pose dynamics
✓ Seamless integration between model and clothing (no floating or misaligned garments)
✓ Professional depth of field and focus
✓ Natural hair movement and styling
✓ Subtle makeup that enhances without looking artificial
✓ Realistic shadows and reflections
✓ High-resolution detail throughout the image

The final image MUST look like it was taken by a professional fashion photographer in a real photoshoot - not computer-generated or artificially composited. This should be indistinguishable from actual product photography used in premium fashion e-commerce sites.`;
  
  try {
    const response = await ai.models.generateContent({
      model: MODEL_NAME,
      contents: {
        parts: [
          {
            inlineData: {
              data: clothingImageParts.data,
              mimeType: clothingImageParts.mimeType,
            },
          },
          {
            inlineData: {
                data: modelImageParts.data,
                mimeType: modelImageParts.mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating image with Gemini API:", error);
    throw new Error("Failed to generate the AI image. Please check the console for more details.");
  }
};